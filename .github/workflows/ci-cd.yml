name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  ENABLE_PYPI: false  # Set to true to enable PyPI publishing

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with dev --no-root

      - name: Run Flake8
        run: poetry run flake8 src tests

      - name: Run Black
        run: poetry run black --check src tests

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ./.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --with dev --no-root

      - name: Install Stockfish
        run: |
          sudo apt-get update
          sudo apt-get install -y stockfish
          echo "STOCKFISH_PATH=$(which stockfish)" >> $GITHUB_ENV

      - name: Run tests
        run: poetry run pytest tests/ -v

  package:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Build package
        run: poetry build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/
          retention-days: 5

  release:
    needs: [package]
    if: |
      startsWith(github.ref, 'refs/tags/') &&
      (!contains(github.ref, '-internal'))
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, '-internal') }}

      - name: Publish to PyPI
        if: ${{ env.ENABLE_PYPI == 'true' }}
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: poetry publish